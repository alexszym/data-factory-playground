{
	"name": "dataflow1",
	"properties": {
		"type": "MappingDataFlow",
		"typeProperties": {
			"sources": [
				{
					"dataset": {
						"referenceName": "AzureSqlTable1",
						"type": "DatasetReference"
					},
					"name": "PatientDataTable"
				},
				{
					"dataset": {
						"referenceName": "PostcodeMap",
						"type": "DatasetReference"
					},
					"name": "PostcodeMap"
				},
				{
					"dataset": {
						"referenceName": "AdminCodeMap",
						"type": "DatasetReference"
					},
					"name": "AdminCodeMap"
				}
			],
			"sinks": [],
			"transformations": [
				{
					"name": "PatientDataWithPostcodeValue"
				},
				{
					"name": "Select"
				},
				{
					"name": "AveragePostcodeValue"
				},
				{
					"name": "PostcodeMapWithDefault"
				},
				{
					"name": "AdminCodeMapSorted"
				},
				{
					"name": "PrepareForMedian"
				},
				{
					"name": "Median"
				}
			],
			"script": "source(output(\n\t\tId as string,\n\t\tName as string,\n\t\tAdmissionDate as timestamp,\n\t\tDateOfBirth as timestamp,\n\t\tPostcode as string,\n\t\tAdmissionCode as integer\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tisolationLevel: 'READ_UNCOMMITTED',\n\tformat: 'table') ~> PatientDataTable\nsource(output(\n\t\tKey as string,\n\t\tValue as float\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tignoreNoFilesFound: false,\n\tskipLines: 1) ~> PostcodeMap\nsource(output(\n\t\tadm_code as integer,\n\t\tval as float\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tignoreNoFilesFound: false) ~> AdminCodeMap\nPatientDataTable, PostcodeMapWithDefault join(Postcode === Key,\n\tjoinType:'left',\n\tbroadcast: 'auto')~> PatientDataWithPostcodeValue\nPatientDataWithPostcodeValue select(mapColumn(\n\t\tId,\n\t\tAdmissionDate,\n\t\tDateOfBirth,\n\t\tAdmissionCode,\n\t\tPostcodeValue = Value\n\t),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> Select\nPostcodeMap aggregate(Value = toFloat(avg(Value))) ~> AveragePostcodeValue\nAveragePostcodeValue, PostcodeMap union(byName: true)~> PostcodeMapWithDefault\nAdminCodeMap sort(asc(val, true)) ~> AdminCodeMapSorted\nAdminCodeMapSorted aggregate(groupBy(val,\n\t\t{} = ERROR_FUNCTION('')),\n\tcollectionx = collect(val),\n\t\ttotalx = count()) ~> PrepareForMedian\nPrepareForMedian derive(median = collectionx[toInteger(round(totalx/2)+1)]) ~> Median"
		}
	}
}